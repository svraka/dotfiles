#!/usr/bin/env Rscript

# Set CRAN repo to automatic redirection. Using `getOption()` keeps
# any Rstudio Package Manager Setup from the site Rprofile.
local({
  r <- getOption("repos")
  r["CRAN"] <- "https://cloud.r-project.org/"
  options(repos = r)
})

options(
  install.packages.check.source = "no",
  install.packages.compile.from.source = "never"
)

if (.Platform$OS.type == "windows") {
  options(repos = c(getOption("repos"), Omegahat = "http://www.omegahat.net/R"))
}

# Check for running R processes. This is only needed on Windows, as it
# locks DLLs but it is also a useful reminder for sessions left open
# with old packages
if (.Platform$OS.type == "windows") {
  tmp <- tempfile()
  system2("tasklist", args = " /FO csv", stdout = tmp)
  processes <- read.csv(tmp)
  processes <- processes[1:2]
  names(processes) <- c("process", "pid")
  processes <- processes[grepl("\\b(R|Rterm|Rscript)\\.exe",
                               processes$process, perl = TRUE), ]
  r_pids <- processes$pid
} else {
  # BSD and Linux `ps` use different arguments and have different features
  #
  # - We use non-standard arguments where possible as they are common.
  # - `-o` is common, although on BSD `comm` is not enough to list
  #   executable name only, thus `c` is added.
  # - BSD `ps` doesn't have process selection options (`-C` on Linux)
  #   for process names, so we grep through all running processes.
  r_pids <- system("ps cx -o comm,pid | grep '\\bR\\b' | awk '{print $2}'",
                   intern = TRUE)
}

# Filter out current session
r_pids <- r_pids[!(r_pids %in% Sys.getpid())]

if (length(r_pids) != 0) {
  stop(sprintf("There are other running R processes (PID: %s)",
               paste(r_pids, collapse = ", ")))
}

# Don't try to update base packages on Linux. They should be updated
# via apt from the CRAN Ubuntu repo but that is often behind the
# source packages.
if (Sys.info()["sysname"] == "Linux") {
  libs <- .libPaths()[1]
} else {
  libs <- NULL
}

update.packages(lib.loc = libs)
