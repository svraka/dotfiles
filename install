#!/usr/bin/env bash

# Only run from the root of the repo
DIR_PATH="`dirname \"$BASH_SOURCE\"`"    # relative
DIR_PATH="`( cd \"$DIR_PATH\" && pwd )`" # absolutized and normalized
if [ -z "$DIR_PATH" ] ; then
    # error; for some reason, the path is not accessible
    # to the script (e.g. permissions re-evaled after suid)
    exit 1
fi

if [ ! $DIR_PATH == $PWD ]; then
    echo "Error: This script can only be ran from \"$DIR_PATH\"."
    exit 1
fi

dryrun=.
case "$1" in
    ""   ) dryrun="";;
    "-n" ) dryrun="-n";;
    *    ) echo "Unknown option"; exit 1;;
esac

make_link()
{
    dest=~/$1

    if [[ -e $dest  && ! -L $dest ]]; then
        echo -e "\e[1m\e[31mError: '$dest' is not a symlink. Skipping.\e[0m"
    elif [[ -e $dest  && -L $dest ]]; then
        if [[ "$(readlink $dest)" != $DIR_PATH/$1 ]]; then
            echo -e "\e[1m\e[31mError: '$dest' is a symlink pointing somewhere else.\e[0m"
        fi
    else
        case $OSTYPE in
            darwin*)
                ln -hfsv $DIR_PATH/$1 $dest
                ;;
            linux*)
                ln -nfsv $DIR_PATH/$1 $dest
                ;;
            *)
                echo "Not yet supported"
                exit 1
                ;;
        esac
    fi
}

check_link()
{
    if [[ ! -e "$@" ]]; then
        echo -e "\e[1m\e[31mWarning: Found dead link '~$@'.\e[0m"
    fi
}
export -f check_link

case $OSTYPE in
    darwin*)
        # Prepare platform specific gpg-agent.conf
        cat .gnupg/gpg-agent.conf.template \
            perl -pe 's/# (pinentry-program)/\1/g' > .gnupg/gpg-agent.conf
        touch -r .gnupg/gpg-agent.conf.template .gnupg/gpg-agent.conf

        make_link .config
        make_link bin

        mkdir -p ~/.gnupg
        make_link .gnupg/gpg.conf
        make_link .gnupg/gpg-agent.conf

        mkdir -p ~/.ssh
        make_link .ssh/config

        make_link .Renviron.unix
        make_link .Rprofile
        make_link .hushlogin
        make_link .inputrc
        make_link .latexmkrc
        make_link .zshenv
        make_link .zshrc
        ;;
    cygwin*|msys*)
        # Prepare platform specific gpg-agent.conf
        cp .gnupg/gpg-agent.conf.template .gnupg/gpg-agent.conf
        touch -r .gnupg/gpg-agent.conf.template .gnupg/gpg-agent.conf

        # Check for installed emoji
        if [[ ! -d ~/.config/mintty/emojis/apple ]]; then
            echo -e "\e[1m\e[31mWarning: Apple emoji were not found in the mintty config directory.\e[0m"
            echo -e "\e[1m\e[31mDownload them from https://github.com/iamcal/emoji-data\e[0m"
        fi

        # Sync files
        rsync -avh \
              --exclude ".git/" --exclude "/.gitignore" \
              --exclude "/.gitmodules" --exclude="/install" \
              --exclude "README.md" \
              --exclude ".hushlogin" \
              --exclude ".Rhistory" --exclude ".Renviron.unix" \
              --exclude ".gnupg/gpg-agent.conf.template" \
              $dryrun \
              "$DIR_PATH"/ ~/
        ;;
    *)
        make_link .config
        make_link bin

        mkdir -p ~/.gnupg
        make_link .gnupg/gpg.conf

        mkdir -p ~/.ssh
        make_link .ssh/config

        make_link .Renviron.unix
        make_link .Rprofile
        make_link .hushlogin
        make_link .inputrc
        make_link .latexmkrc
        make_link .zshenv
        make_link .zshrc
        ;;
esac

if [[ $OSTYPE != msys* ]]; then
    find ~ -maxdepth 1 -type l -print0 | xargs -0 -I {} bash -c 'check_link "$@"' _ {}
fi

export -n check_link
