#!/usr/bin/env bash

# Only run from the root of the repo
DIR_PATH="`dirname \"$BASH_SOURCE\"`"    # relative
DIR_PATH="`( cd \"$DIR_PATH\" && pwd )`" # absolutized and normalized
if [ -z "$DIR_PATH" ] ; then
    # error; for some reason, the path is not accessible
    # to the script (e.g. permissions re-evaled after suid)
    exit 1
fi

if [ ! $DIR_PATH == $PWD ]; then
    echo "Error: This script can only be ran from \"$DIR_PATH\"."
    exit 1
fi

make_link()
{
    # By default link file to ~/.file
    source="$1"
    if [[ "${source:0:1}" == "." ]]; then
        dest=~/"$source"
    else
        dest=~/."$source"
    fi

    # But destinations can be set in a second argument
    if [[ -n "$2" ]]; then
        dest=~/"$2"
    fi

    if [[ $OSTYPE != msys* ]]; then
        if [[ -e $dest && ! -L $dest ]]; then
            echo -e "\e[1m\e[31mError: '$dest' is not a symlink. Skipping.\e[0m"
        elif [[ -e $dest && -L $dest ]]; then
            if [[ "$(readlink $dest)" != $DIR_PATH/$source ]]; then
                echo -e "\e[1m\e[31mError: '$dest' is a symlink pointing somewhere else.\e[0m"
            fi
        else
            case $OSTYPE in
                darwin*)
                    ln -hfsv $DIR_PATH/$source $dest
                    ;;
                linux*)
                    ln -nfsv $DIR_PATH/$source $dest
                    ;;
                *)
                    echo "Not yet supported"
                    exit 1
                    ;;
            esac
        fi
    else
        # On Windows we can only link directories using junctions
        if [[ -d $source && -e $dest && ! -L $dest ]]; then
            echo -e "\e[1m\e[31mError: '$dest' is not a directory junction. Skipping.\e[0m"
        elif [[ -d $source && -e $dest && -L $dest ]]; then
            if [[ "$(readlink $dest)" != $DIR_PATH/$source ]]; then
                echo -e "\e[1m\e[31mError: '$dest' is a symlink pointing somewhere else.\e[0m"
            fi
        else
            if [[ -d $source ]]; then
                cmd //c "mklink /j $(cygpath -w $dest) $(cygpath -w $source)"
            elif [[ -f $source ]]; then
                if [[ $source -nt $dest ]]; then
                    cp -pv $DIR_PATH/$source $dest
                fi
            fi
        fi
    fi
}

check_link()
{
    if [[ ! -e "$@" ]]; then
        echo -e "\e[1m\e[31mWarning: Found dead link '~$@'.\e[0m"
    fi
}
export -f check_link

# Prepare platform specific ssh config
sed "s,<HOME>,$HOME,g" ssh/config.template > ssh/config
touch -r ssh/config.template ssh/config

case $OSTYPE in
    darwin*)
        # No changes needed here.
        cp -p config/colordiff/colordiffrc.template config/colordiff/colordiffrc

        # Prepare platform specific gpg-agent.conf
        cat gnupg/gpg-agent.conf.template | \
            perl -pe 's/# (pinentry-program)/\1/g' > gnupg/gpg-agent.conf
        touch -r gnupg/gpg-agent.conf.template gnupg/gpg-agent.conf
        ;;
    cygwin*|msys*)
        # We need to set the diff command to an MSYS diff, instead of
        # a MINGW diff, otherwise colouring won't work always and
        # command substitution is only available with zsh's `=()`
        # construct but not with the standard `<()`.
        perl -pe 's/diff$/\/usr\/bin\/diff/g' \
             config/colordiff/colordiffrc.template > config/colordiff/colordiffrc
        touch -r config/colordiff/colordiffrc.template config/colordiff/colordiffrc

        cp gnupg/gpg-agent.conf.template gnupg/gpg-agent.conf
        touch -r gnupg/gpg-agent.conf.template gnupg/gpg-agent.conf

        # Check for installed emoji
        if [[ ! -d config/mintty/emojis/apple ]]; then
            echo -e "\e[1m\e[31mWarning: Apple emoji were not found in the mintty config directory.\e[0m"
            echo -e "\e[1m\e[31mDownload them from https://github.com/iamcal/emoji-data\e[0m"
        fi
        ;;
    *)
        # No changes needed here.
        cp -p config/colordiff/colordiffrc.template config/colordiff/colordiffrc
        ;;
esac

make_link config

mkdir -p ~/.local
make_link local/bin

mkdir -p -m 700 ~/.gnupg
make_link gnupg/gpg.conf
# Agent is forwarded in SSH
[[ $OSTYPE != linux* ]] && make_link gnupg/gpg-agent.conf

mkdir -p -m 700 ~/.ssh
make_link ssh/config
# Only where sshd is running
[[ "$OSTYPE" = linux* ]] && make_link ssh/rc

make_link .Renviron
make_link .Rprofile
[[ $OSTYPE == msys* ]] && make_link Rconsole Rconsole
[[ $OSTYPE != msys* ]] && make_link .hushlogin
make_link .latexmkrc
make_link .tmux.conf
make_link .zshenv

[[ $OSTYPE == msys* ]] && make_link profile.do profile.do

# Create directories to fix bootstrap problems for data and cache
# files under XDG directories.
xdg_message="is not defined, run this script one more time to bootstrap XDG directories."
if [[ -z "$XDG_CACHE_HOME" ]]; then
    echo "XDG_CACHE_HOME $xdg_message"
    exit 1
elif [[ -z "$XDG_DATA_HOME" ]]; then
    echo "XDG_DATA_HOME $xdg_message"
    exit 1
else
    mkdir -p "$XDG_CACHE_HOME"/zsh

    mkdir -p "$XDG_DATA_HOME"/less
    mkdir -p "$XDG_DATA_HOME"/zsh
fi

# We install links into some directories under `~`, so check 2
# levels deep.
find ~ -maxdepth 2 -type l -print0 | xargs -0 -I {} bash -c 'check_link "$@"' _ {}

export -n check_link
